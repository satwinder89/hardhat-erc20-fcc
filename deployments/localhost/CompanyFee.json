{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ownerFee_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agentAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "agentName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "agentFee",
          "type": "uint256"
        }
      ],
      "name": "addAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "companyAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "companyName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "companyFee",
          "type": "uint256"
        }
      ],
      "name": "addCompany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agentAddress",
          "type": "address"
        }
      ],
      "name": "agent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct CompanyFee.Agent",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "companyAddress",
          "type": "address"
        }
      ],
      "name": "company",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct CompanyFee.Company",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agentAddress",
          "type": "address"
        }
      ],
      "name": "getAgentCompany",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agentAddress",
          "type": "address"
        }
      ],
      "name": "getAgentFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "companyAddress",
          "type": "address"
        }
      ],
      "name": "getCompanyAgents",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "companyAddress",
          "type": "address"
        }
      ],
      "name": "getCompanyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agentAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "splitPayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe31bf7921826e79a5363086f8ba809352d9b81144e01f4e4dfa6b114941e395c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1910653",
    "logsBloom": "0x
    "blockHash": "0xcfaa138757ce0f769c40e68ad39839dac6f9d41d4fd3f4d93e950103a563bfaa",
    "transactionHash": "0xe31bf7921826e79a5363086f8ba809352d9b81144e01f4e4dfa6b114941e395c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0xe31bf7921826e79a5363086f8ba809352d9b81144e01f4e4dfa6b114941e395c",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcfaa138757ce0f769c40e68ad39839dac6f9d41d4fd3f4d93e950103a563bfaa"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "1910653",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10"
  ],
  "numDeployments": 1,
  "solcInputHash": "bd3992d6d197ca6872452e617a5bf02e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ownerFee_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agentAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"agentFee\",\"type\":\"uint256\"}],\"name\":\"addAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"companyName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"companyFee\",\"type\":\"uint256\"}],\"name\":\"addCompany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agentAddress\",\"type\":\"address\"}],\"name\":\"agent\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct CompanyFee.Agent\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"}],\"name\":\"company\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct CompanyFee.Company\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agentAddress\",\"type\":\"address\"}],\"name\":\"getAgentCompany\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agentAddress\",\"type\":\"address\"}],\"name\":\"getAgentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"}],\"name\":\"getCompanyAgents\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"}],\"name\":\"getCompanyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agentAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CompanyFee.sol\":\"CompanyFee\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/CompanyFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n//Interface name is not important, however functions in it are important\\r\\ninterface SellaTokenInterface {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external returns (uint256);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract CompanyFee is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address private _owner;\\r\\n    uint256 private _ownerFee;\\r\\n    address private _tokenAddres;\\r\\n    SellaTokenInterface SellaTokenContract;\\r\\n\\r\\n    constructor(address tokenAddress, uint256 ownerFee_) {\\r\\n        _owner = msg.sender;\\r\\n        _ownerFee = ownerFee_;\\r\\n        _tokenAddres = tokenAddress;\\r\\n        SellaTokenContract = SellaTokenInterface(tokenAddress);\\r\\n    }\\r\\n\\r\\n    struct Company {\\r\\n        string name;\\r\\n        uint256 fee;\\r\\n        bool exists;\\r\\n    }\\r\\n    mapping(address => Company) companies;\\r\\n\\r\\n    struct Agent {\\r\\n        string name;\\r\\n        uint256 fee;\\r\\n        bool exists;\\r\\n    }\\r\\n    mapping(address => Agent) agents;\\r\\n\\r\\n    //dato l'addess di un agente ricavo la compagnia di appartenenza\\r\\n    mapping(address => address) agentCompany;\\r\\n    //dato l'indirizzo di una compagnia, tutti i suoi agenti\\r\\n    mapping(address => address[]) companyAgents;\\r\\n\\r\\n    function addCompany(\\r\\n        address companyAddress,\\r\\n        string memory companyName,\\r\\n        uint256 companyFee\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n            companyAddress != address(0),\\r\\n            \\\"Company address cannot be the zero address\\\"\\r\\n        );\\r\\n\\r\\n        companies[companyAddress] = Company(companyName, companyFee, true);\\r\\n    }\\r\\n\\r\\n    modifier onlyCompany() {\\r\\n        _checkCompany();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _checkCompany() internal view virtual {\\r\\n        require(companies[msg.sender].exists, \\\"Company not exist\\\");\\r\\n    }\\r\\n\\r\\n    function addAgent(\\r\\n        address agentAddress,\\r\\n        string memory agentName,\\r\\n        uint256 agentFee\\r\\n    ) public onlyCompany {\\r\\n        require(\\r\\n            agentAddress != address(0),\\r\\n            \\\"Agent address cannot be the zero address\\\"\\r\\n        );\\r\\n\\r\\n        agents[agentAddress] = Agent(agentName, agentFee, true);\\r\\n        agentCompany[agentAddress] = msg.sender;\\r\\n        companyAgents[msg.sender].push(agentAddress);\\r\\n    }\\r\\n\\r\\n    function splitPayment(address agentAddress, uint256 amount)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 agentFee = agents[agentAddress].fee;\\r\\n        address companyAddress = agentCompany[agentAddress];\\r\\n        uint256 companyFee = companies[companyAddress].fee;\\r\\n\\r\\n        uint256 payAgent = SafeMath.div(SafeMath.mul(amount, agentFee), 100);\\r\\n        SellaTokenContract.transferFrom(msg.sender, agentAddress, payAgent);\\r\\n\\r\\n        uint256 payOwner = SafeMath.div(SafeMath.mul(amount, _ownerFee), 100);\\r\\n        SellaTokenContract.transferFrom(msg.sender, _owner, payOwner);\\r\\n\\r\\n        uint256 payCompany = SafeMath.div(\\r\\n            SafeMath.mul(amount, companyFee),\\r\\n            100\\r\\n        );\\r\\n        SellaTokenContract.transferFrom(msg.sender, companyAddress, payCompany);\\r\\n\\r\\n        uint256 totFee = SafeMath.add(payAgent, payCompany);\\r\\n        totFee = SafeMath.add(totFee, payOwner);\\r\\n\\r\\n        amount = SafeMath.sub(amount, totFee);\\r\\n\\r\\n        SellaTokenContract.transferFrom(msg.sender, companyAddress, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getCompanyFee(address companyAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return companies[companyAddress].fee;\\r\\n    }\\r\\n\\r\\n    function getAgentFee(address agentAddress) public view returns (uint256) {\\r\\n        return agents[agentAddress].fee;\\r\\n    }\\r\\n\\r\\n    function getContractAddress() public view returns (address) {\\r\\n        return address(this);\\r\\n    }\\r\\n\\r\\n    function ownerFee() public view returns (uint256) {\\r\\n        return _ownerFee;\\r\\n    }\\r\\n\\r\\n    function getTokenAddress() public view returns (address) {\\r\\n        return _tokenAddres;\\r\\n    }\\r\\n\\r\\n    function company(address companyAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (Company memory)\\r\\n    {\\r\\n        return companies[companyAddress];\\r\\n    }\\r\\n\\r\\n    function agent(address agentAddress) public view returns (Agent memory) {\\r\\n        return agents[agentAddress];\\r\\n    }\\r\\n\\r\\n    function getCompanyAgents(address companyAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        return companyAgents[companyAddress];\\r\\n    }\\r\\n\\r\\n    function getAgentCompany(address agentAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return agentCompany[agentAddress];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd83a19b7ca986d9bd6fc87e03d0e769541d60c456e86952f3b412cd58b390bbf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620022603803806200226083398181016040528101906200003791906200029a565b620000576200004b6200012960201b60201c565b6200013160201b60201c565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060028190555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620002e1565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022782620001fa565b9050919050565b62000239816200021a565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b6000819050919050565b62000274816200025f565b81146200028057600080fd5b50565b600081519050620002948162000269565b92915050565b60008060408385031215620002b457620002b3620001f5565b5b6000620002c48582860162000248565b9250506020620002d78582860162000283565b9150509250929050565b611f6f80620002f16000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80639efedba311610097578063bcb47e9a11610066578063bcb47e9a14610286578063c44f45fe146102b6578063d5b2a01a146102e6578063f2fde38b14610304576100f5565b80639efedba3146101ee578063b27ab5ce1461020a578063b80f56881461023a578063bbb9b58f1461026a576100f5565b80635ccca992116100d35780635ccca99214610166578063715018a6146101965780638da5cb5b146101a057806392e423b5146101be576100f5565b806310fe9ae8146100fa57806332a2c5d0146101185780633c44156714610136575b600080fd5b610102610320565b60405161010f919061123c565b60405180910390f35b61012061034a565b60405161012d919061123c565b60405180910390f35b610150600480360381019061014b91906112cd565b610352565b60405161015d9190611328565b60405180910390f35b610180600480360381019061017b9190611343565b610774565b60405161018d919061137f565b60405180910390f35b61019e6107c0565b005b6101a86107d4565b6040516101b5919061123c565b60405180910390f35b6101d860048036038101906101d39190611343565b6107fd565b6040516101e591906114a1565b60405180910390f35b610208600480360381019061020391906115f8565b61090d565b005b610224600480360381019061021f9190611343565b610b47565b6040516102319190611725565b60405180910390f35b610254600480360381019061024f9190611343565b610c14565b604051610261919061123c565b60405180910390f35b610284600480360381019061027f91906115f8565b610c7d565b005b6102a0600480360381019061029b9190611343565b610d99565b6040516102ad919061137f565b60405180910390f35b6102d060048036038101906102cb9190611343565b610de5565b6040516102dd9190611797565b60405180910390f35b6102ee610ef5565b6040516102fb919061137f565b60405180910390f35b61031e60048036038101906103199190611343565b610eff565b005b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600030905090565b600080600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050600061045b6104548786610f82565b6064610f98565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3389846040518463ffffffff1660e01b81526004016104bc939291906117b9565b6020604051808303816000875af11580156104db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ff919061181c565b50600061051861051188600254610f82565b6064610f98565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b815260040161059b939291906117b9565b6020604051808303816000875af11580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de919061181c565b5060006105f56105ee8986610f82565b6064610f98565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3387846040518463ffffffff1660e01b8152600401610656939291906117b9565b6020604051808303816000875af1158015610675573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610699919061181c565b5060006106a68483610fae565b90506106b28184610fae565b90506106be8982610fc4565b9850600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33888c6040518463ffffffff1660e01b815260040161071f939291906117b9565b6020604051808303816000875af115801561073e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610762919061181c565b50600197505050505050505092915050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b6107c8610fda565b6107d26000611058565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6108056111b5565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201805461085f90611878565b80601f016020809104026020016040519081016040528092919081815260200182805461088b90611878565b80156108d85780601f106108ad576101008083540402835291602001916108d8565b820191906000526020600020905b8154815290600101906020018083116108bb57829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900460ff1615151515815250509050919050565b61091561111c565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097b9061192c565b60405180910390fd5b604051806060016040528083815260200182815260200160011515815250600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190816109f69190611af8565b506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555090505033600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6060600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610c0857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610bbe575b50505050509050919050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610c85610fda565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610cf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ceb90611c3c565b60405180910390fd5b604051806060016040528083815260200182815260200160011515815250600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019081610d669190611af8565b506020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550905050505050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b610ded6111d8565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082018054610e4790611878565b80601f0160208091040260200160405190810160405280929190818152602001828054610e7390611878565b8015610ec05780601f10610e9557610100808354040283529160200191610ec0565b820191906000526020600020905b815481529060010190602001808311610ea357829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900460ff1615151515815250509050919050565b6000600254905090565b610f07610fda565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6d90611cce565b60405180910390fd5b610f7f81611058565b50565b60008183610f909190611d1d565b905092915050565b60008183610fa69190611da6565b905092915050565b60008183610fbc9190611dd7565b905092915050565b60008183610fd29190611e2d565b905092915050565b610fe26111ad565b73ffffffffffffffffffffffffffffffffffffffff166110006107d4565b73ffffffffffffffffffffffffffffffffffffffff1614611056576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104d90611ead565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166111ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a290611f19565b60405180910390fd5b565b600033905090565b604051806060016040528060608152602001600081526020016000151581525090565b604051806060016040528060608152602001600081526020016000151581525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611226826111fb565b9050919050565b6112368161121b565b82525050565b6000602082019050611251600083018461122d565b92915050565b6000604051905090565b600080fd5b600080fd5b6112748161121b565b811461127f57600080fd5b50565b6000813590506112918161126b565b92915050565b6000819050919050565b6112aa81611297565b81146112b557600080fd5b50565b6000813590506112c7816112a1565b92915050565b600080604083850312156112e4576112e3611261565b5b60006112f285828601611282565b9250506020611303858286016112b8565b9150509250929050565b60008115159050919050565b6113228161130d565b82525050565b600060208201905061133d6000830184611319565b92915050565b60006020828403121561135957611358611261565b5b600061136784828501611282565b91505092915050565b61137981611297565b82525050565b60006020820190506113946000830184611370565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156113d45780820151818401526020810190506113b9565b838111156113e3576000848401525b50505050565b6000601f19601f8301169050919050565b60006114058261139a565b61140f81856113a5565b935061141f8185602086016113b6565b611428816113e9565b840191505092915050565b61143c81611297565b82525050565b61144b8161130d565b82525050565b6000606083016000830151848203600086015261146e82826113fa565b91505060208301516114836020860182611433565b5060408301516114966040860182611442565b508091505092915050565b600060208201905081810360008301526114bb8184611451565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611505826113e9565b810181811067ffffffffffffffff82111715611524576115236114cd565b5b80604052505050565b6000611537611257565b905061154382826114fc565b919050565b600067ffffffffffffffff821115611563576115626114cd565b5b61156c826113e9565b9050602081019050919050565b82818337600083830152505050565b600061159b61159684611548565b61152d565b9050828152602081018484840111156115b7576115b66114c8565b5b6115c2848285611579565b509392505050565b600082601f8301126115df576115de6114c3565b5b81356115ef848260208601611588565b91505092915050565b60008060006060848603121561161157611610611261565b5b600061161f86828701611282565b935050602084013567ffffffffffffffff8111156116405761163f611266565b5b61164c868287016115ca565b925050604061165d868287016112b8565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61169c8161121b565b82525050565b60006116ae8383611693565b60208301905092915050565b6000602082019050919050565b60006116d282611667565b6116dc8185611672565b93506116e783611683565b8060005b838110156117185781516116ff88826116a2565b975061170a836116ba565b9250506001810190506116eb565b5085935050505092915050565b6000602082019050818103600083015261173f81846116c7565b905092915050565b6000606083016000830151848203600086015261176482826113fa565b91505060208301516117796020860182611433565b50604083015161178c6040860182611442565b508091505092915050565b600060208201905081810360008301526117b18184611747565b905092915050565b60006060820190506117ce600083018661122d565b6117db602083018561122d565b6117e86040830184611370565b949350505050565b6117f98161130d565b811461180457600080fd5b50565b600081519050611816816117f0565b92915050565b60006020828403121561183257611831611261565b5b600061184084828501611807565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061189057607f821691505b6020821081036118a3576118a2611849565b5b50919050565b600082825260208201905092915050565b7f4167656e7420616464726573732063616e6e6f7420626520746865207a65726f60008201527f2061646472657373000000000000000000000000000000000000000000000000602082015250565b60006119166028836118a9565b9150611921826118ba565b604082019050919050565b6000602082019050818103600083015261194581611909565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026119ae7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611971565b6119b88683611971565b95508019841693508086168417925050509392505050565b6000819050919050565b60006119f56119f06119eb84611297565b6119d0565b611297565b9050919050565b6000819050919050565b611a0f836119da565b611a23611a1b826119fc565b84845461197e565b825550505050565b600090565b611a38611a2b565b611a43818484611a06565b505050565b5b81811015611a6757611a5c600082611a30565b600181019050611a49565b5050565b601f821115611aac57611a7d8161194c565b611a8684611961565b81016020851015611a95578190505b611aa9611aa185611961565b830182611a48565b50505b505050565b600082821c905092915050565b6000611acf60001984600802611ab1565b1980831691505092915050565b6000611ae88383611abe565b9150826002028217905092915050565b611b018261139a565b67ffffffffffffffff811115611b1a57611b196114cd565b5b611b248254611878565b611b2f828285611a6b565b600060209050601f831160018114611b625760008415611b50578287015190505b611b5a8582611adc565b865550611bc2565b601f198416611b708661194c565b60005b82811015611b9857848901518255600182019150602085019450602081019050611b73565b86831015611bb55784890151611bb1601f891682611abe565b8355505b6001600288020188555050505b505050505050565b7f436f6d70616e7920616464726573732063616e6e6f7420626520746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000611c26602a836118a9565b9150611c3182611bca565b604082019050919050565b60006020820190508181036000830152611c5581611c19565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611cb86026836118a9565b9150611cc382611c5c565b604082019050919050565b60006020820190508181036000830152611ce781611cab565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d2882611297565b9150611d3383611297565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611d6c57611d6b611cee565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611db182611297565b9150611dbc83611297565b925082611dcc57611dcb611d77565b5b828204905092915050565b6000611de282611297565b9150611ded83611297565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e2257611e21611cee565b5b828201905092915050565b6000611e3882611297565b9150611e4383611297565b925082821015611e5657611e55611cee565b5b828203905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611e976020836118a9565b9150611ea282611e61565b602082019050919050565b60006020820190508181036000830152611ec681611e8a565b9050919050565b7f436f6d70616e79206e6f74206578697374000000000000000000000000000000600082015250565b6000611f036011836118a9565b9150611f0e82611ecd565b602082019050919050565b60006020820190508181036000830152611f3281611ef6565b905091905056fea26469706673582212207f0a88af454fe1754d40fe3e768049664fcbf5338f6ee41da530c96e084db6f564736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80639efedba311610097578063bcb47e9a11610066578063bcb47e9a14610286578063c44f45fe146102b6578063d5b2a01a146102e6578063f2fde38b14610304576100f5565b80639efedba3146101ee578063b27ab5ce1461020a578063b80f56881461023a578063bbb9b58f1461026a576100f5565b80635ccca992116100d35780635ccca99214610166578063715018a6146101965780638da5cb5b146101a057806392e423b5146101be576100f5565b806310fe9ae8146100fa57806332a2c5d0146101185780633c44156714610136575b600080fd5b610102610320565b60405161010f919061123c565b60405180910390f35b61012061034a565b60405161012d919061123c565b60405180910390f35b610150600480360381019061014b91906112cd565b610352565b60405161015d9190611328565b60405180910390f35b610180600480360381019061017b9190611343565b610774565b60405161018d919061137f565b60405180910390f35b61019e6107c0565b005b6101a86107d4565b6040516101b5919061123c565b60405180910390f35b6101d860048036038101906101d39190611343565b6107fd565b6040516101e591906114a1565b60405180910390f35b610208600480360381019061020391906115f8565b61090d565b005b610224600480360381019061021f9190611343565b610b47565b6040516102319190611725565b60405180910390f35b610254600480360381019061024f9190611343565b610c14565b604051610261919061123c565b60405180910390f35b610284600480360381019061027f91906115f8565b610c7d565b005b6102a0600480360381019061029b9190611343565b610d99565b6040516102ad919061137f565b60405180910390f35b6102d060048036038101906102cb9190611343565b610de5565b6040516102dd9190611797565b60405180910390f35b6102ee610ef5565b6040516102fb919061137f565b60405180910390f35b61031e60048036038101906103199190611343565b610eff565b005b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600030905090565b600080600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050600061045b6104548786610f82565b6064610f98565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3389846040518463ffffffff1660e01b81526004016104bc939291906117b9565b6020604051808303816000875af11580156104db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ff919061181c565b50600061051861051188600254610f82565b6064610f98565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b815260040161059b939291906117b9565b6020604051808303816000875af11580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de919061181c565b5060006105f56105ee8986610f82565b6064610f98565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3387846040518463ffffffff1660e01b8152600401610656939291906117b9565b6020604051808303816000875af1158015610675573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610699919061181c565b5060006106a68483610fae565b90506106b28184610fae565b90506106be8982610fc4565b9850600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33888c6040518463ffffffff1660e01b815260040161071f939291906117b9565b6020604051808303816000875af115801561073e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610762919061181c565b50600197505050505050505092915050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b6107c8610fda565b6107d26000611058565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6108056111b5565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201805461085f90611878565b80601f016020809104026020016040519081016040528092919081815260200182805461088b90611878565b80156108d85780601f106108ad576101008083540402835291602001916108d8565b820191906000526020600020905b8154815290600101906020018083116108bb57829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900460ff1615151515815250509050919050565b61091561111c565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097b9061192c565b60405180910390fd5b604051806060016040528083815260200182815260200160011515815250600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190816109f69190611af8565b506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555090505033600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6060600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610c0857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610bbe575b50505050509050919050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610c85610fda565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610cf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ceb90611c3c565b60405180910390fd5b604051806060016040528083815260200182815260200160011515815250600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019081610d669190611af8565b506020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550905050505050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b610ded6111d8565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082018054610e4790611878565b80601f0160208091040260200160405190810160405280929190818152602001828054610e7390611878565b8015610ec05780601f10610e9557610100808354040283529160200191610ec0565b820191906000526020600020905b815481529060010190602001808311610ea357829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900460ff1615151515815250509050919050565b6000600254905090565b610f07610fda565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6d90611cce565b60405180910390fd5b610f7f81611058565b50565b60008183610f909190611d1d565b905092915050565b60008183610fa69190611da6565b905092915050565b60008183610fbc9190611dd7565b905092915050565b60008183610fd29190611e2d565b905092915050565b610fe26111ad565b73ffffffffffffffffffffffffffffffffffffffff166110006107d4565b73ffffffffffffffffffffffffffffffffffffffff1614611056576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104d90611ead565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166111ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a290611f19565b60405180910390fd5b565b600033905090565b604051806060016040528060608152602001600081526020016000151581525090565b604051806060016040528060608152602001600081526020016000151581525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611226826111fb565b9050919050565b6112368161121b565b82525050565b6000602082019050611251600083018461122d565b92915050565b6000604051905090565b600080fd5b600080fd5b6112748161121b565b811461127f57600080fd5b50565b6000813590506112918161126b565b92915050565b6000819050919050565b6112aa81611297565b81146112b557600080fd5b50565b6000813590506112c7816112a1565b92915050565b600080604083850312156112e4576112e3611261565b5b60006112f285828601611282565b9250506020611303858286016112b8565b9150509250929050565b60008115159050919050565b6113228161130d565b82525050565b600060208201905061133d6000830184611319565b92915050565b60006020828403121561135957611358611261565b5b600061136784828501611282565b91505092915050565b61137981611297565b82525050565b60006020820190506113946000830184611370565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156113d45780820151818401526020810190506113b9565b838111156113e3576000848401525b50505050565b6000601f19601f8301169050919050565b60006114058261139a565b61140f81856113a5565b935061141f8185602086016113b6565b611428816113e9565b840191505092915050565b61143c81611297565b82525050565b61144b8161130d565b82525050565b6000606083016000830151848203600086015261146e82826113fa565b91505060208301516114836020860182611433565b5060408301516114966040860182611442565b508091505092915050565b600060208201905081810360008301526114bb8184611451565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611505826113e9565b810181811067ffffffffffffffff82111715611524576115236114cd565b5b80604052505050565b6000611537611257565b905061154382826114fc565b919050565b600067ffffffffffffffff821115611563576115626114cd565b5b61156c826113e9565b9050602081019050919050565b82818337600083830152505050565b600061159b61159684611548565b61152d565b9050828152602081018484840111156115b7576115b66114c8565b5b6115c2848285611579565b509392505050565b600082601f8301126115df576115de6114c3565b5b81356115ef848260208601611588565b91505092915050565b60008060006060848603121561161157611610611261565b5b600061161f86828701611282565b935050602084013567ffffffffffffffff8111156116405761163f611266565b5b61164c868287016115ca565b925050604061165d868287016112b8565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61169c8161121b565b82525050565b60006116ae8383611693565b60208301905092915050565b6000602082019050919050565b60006116d282611667565b6116dc8185611672565b93506116e783611683565b8060005b838110156117185781516116ff88826116a2565b975061170a836116ba565b9250506001810190506116eb565b5085935050505092915050565b6000602082019050818103600083015261173f81846116c7565b905092915050565b6000606083016000830151848203600086015261176482826113fa565b91505060208301516117796020860182611433565b50604083015161178c6040860182611442565b508091505092915050565b600060208201905081810360008301526117b18184611747565b905092915050565b60006060820190506117ce600083018661122d565b6117db602083018561122d565b6117e86040830184611370565b949350505050565b6117f98161130d565b811461180457600080fd5b50565b600081519050611816816117f0565b92915050565b60006020828403121561183257611831611261565b5b600061184084828501611807565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061189057607f821691505b6020821081036118a3576118a2611849565b5b50919050565b600082825260208201905092915050565b7f4167656e7420616464726573732063616e6e6f7420626520746865207a65726f60008201527f2061646472657373000000000000000000000000000000000000000000000000602082015250565b60006119166028836118a9565b9150611921826118ba565b604082019050919050565b6000602082019050818103600083015261194581611909565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026119ae7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611971565b6119b88683611971565b95508019841693508086168417925050509392505050565b6000819050919050565b60006119f56119f06119eb84611297565b6119d0565b611297565b9050919050565b6000819050919050565b611a0f836119da565b611a23611a1b826119fc565b84845461197e565b825550505050565b600090565b611a38611a2b565b611a43818484611a06565b505050565b5b81811015611a6757611a5c600082611a30565b600181019050611a49565b5050565b601f821115611aac57611a7d8161194c565b611a8684611961565b81016020851015611a95578190505b611aa9611aa185611961565b830182611a48565b50505b505050565b600082821c905092915050565b6000611acf60001984600802611ab1565b1980831691505092915050565b6000611ae88383611abe565b9150826002028217905092915050565b611b018261139a565b67ffffffffffffffff811115611b1a57611b196114cd565b5b611b248254611878565b611b2f828285611a6b565b600060209050601f831160018114611b625760008415611b50578287015190505b611b5a8582611adc565b865550611bc2565b601f198416611b708661194c565b60005b82811015611b9857848901518255600182019150602085019450602081019050611b73565b86831015611bb55784890151611bb1601f891682611abe565b8355505b6001600288020188555050505b505050505050565b7f436f6d70616e7920616464726573732063616e6e6f7420626520746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000611c26602a836118a9565b9150611c3182611bca565b604082019050919050565b60006020820190508181036000830152611c5581611c19565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611cb86026836118a9565b9150611cc382611c5c565b604082019050919050565b60006020820190508181036000830152611ce781611cab565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d2882611297565b9150611d3383611297565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611d6c57611d6b611cee565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611db182611297565b9150611dbc83611297565b925082611dcc57611dcb611d77565b5b828204905092915050565b6000611de282611297565b9150611ded83611297565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e2257611e21611cee565b5b828201905092915050565b6000611e3882611297565b9150611e4383611297565b925082821015611e5657611e55611cee565b5b828203905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611e976020836118a9565b9150611ea282611e61565b602082019050919050565b60006020820190508181036000830152611ec681611e8a565b9050919050565b7f436f6d70616e79206e6f74206578697374000000000000000000000000000000600082015250565b6000611f036011836118a9565b9150611f0e82611ecd565b602082019050919050565b60006020820190508181036000830152611f3281611ef6565b905091905056fea26469706673582212207f0a88af454fe1754d40fe3e768049664fcbf5338f6ee41da530c96e084db6f564736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1278,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1280,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "_ownerFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1282,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "_tokenAddres",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1285,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "SellaTokenContract",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(SellaTokenInterface)1271"
      },
      {
        "astId": 1324,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "companies",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Company)1319_storage)"
      },
      {
        "astId": 1336,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "agents",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Agent)1331_storage)"
      },
      {
        "astId": 1340,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "agentCompany",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1345,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "companyAgents",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(SellaTokenInterface)1271": {
        "encoding": "inplace",
        "label": "contract SellaTokenInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Agent)1331_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CompanyFee.Agent)",
        "numberOfBytes": "32",
        "value": "t_struct(Agent)1331_storage"
      },
      "t_mapping(t_address,t_struct(Company)1319_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CompanyFee.Company)",
        "numberOfBytes": "32",
        "value": "t_struct(Company)1319_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Agent)1331_storage": {
        "encoding": "inplace",
        "label": "struct CompanyFee.Agent",
        "members": [
          {
            "astId": 1326,
            "contract": "contracts/CompanyFee.sol:CompanyFee",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1328,
            "contract": "contracts/CompanyFee.sol:CompanyFee",
            "label": "fee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1330,
            "contract": "contracts/CompanyFee.sol:CompanyFee",
            "label": "exists",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Company)1319_storage": {
        "encoding": "inplace",
        "label": "struct CompanyFee.Company",
        "members": [
          {
            "astId": 1314,
            "contract": "contracts/CompanyFee.sol:CompanyFee",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1316,
            "contract": "contracts/CompanyFee.sol:CompanyFee",
            "label": "fee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1318,
            "contract": "contracts/CompanyFee.sol:CompanyFee",
            "label": "exists",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
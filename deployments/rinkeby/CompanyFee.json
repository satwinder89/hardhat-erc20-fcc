{
  "address": "0xA21fd2Ea399834458464C603e74876c3BceF87A2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ownerFee_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agentAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "agentName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "agentFee",
          "type": "uint256"
        }
      ],
      "name": "addAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "companyAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "companyName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "companyFee",
          "type": "uint256"
        }
      ],
      "name": "addCompany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agentAddress",
          "type": "address"
        }
      ],
      "name": "agent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct CompanyFee.Agent",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "companyAddress",
          "type": "address"
        }
      ],
      "name": "company",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct CompanyFee.Company",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agentAddress",
          "type": "address"
        }
      ],
      "name": "getAgentCompany",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "companyAddress",
          "type": "address"
        }
      ],
      "name": "getCompanyAgents",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agentAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "splitPayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x32f3a84f12758b97fab352651d1ec98b5b881a90567b29fba1450c244976ba71",
  "receipt": {
    "to": null,
    "from": "0x34e0c38b88F70f7F70B5cbF27fcF9A38ec057b96",
    "contractAddress": "0xA21fd2Ea399834458464C603e74876c3BceF87A2",
    "transactionIndex": 10,
    "gasUsed": "1829606",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000080000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000008000000800000000000000000000000000000000000000000000000000000000000000000010000000000020000000000000000000010000000000000000000000000000000000000000000000",
    "blockHash": "0x4f8f5ea7d27759a04d8a3cd8f3ca82794d279c607ecdfb23fc38cade5a11da9b",
    "transactionHash": "0x32f3a84f12758b97fab352651d1ec98b5b881a90567b29fba1450c244976ba71",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 11178494,
        "transactionHash": "0x32f3a84f12758b97fab352651d1ec98b5b881a90567b29fba1450c244976ba71",
        "address": "0xA21fd2Ea399834458464C603e74876c3BceF87A2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000034e0c38b88f70f7f70b5cbf27fcf9a38ec057b96"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0x4f8f5ea7d27759a04d8a3cd8f3ca82794d279c607ecdfb23fc38cade5a11da9b"
      }
    ],
    "blockNumber": 11178494,
    "cumulativeGasUsed": "3481508",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9be38438B308C49EBC784AeB9368474Ac2ad1CCf",
    "10"
  ],
  "numDeployments": 5,
  "solcInputHash": "c7f7bb6fc3ae575a80aedc005d0f7a08",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ownerFee_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agentAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"agentFee\",\"type\":\"uint256\"}],\"name\":\"addAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"companyName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"companyFee\",\"type\":\"uint256\"}],\"name\":\"addCompany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agentAddress\",\"type\":\"address\"}],\"name\":\"agent\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct CompanyFee.Agent\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"}],\"name\":\"company\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct CompanyFee.Company\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agentAddress\",\"type\":\"address\"}],\"name\":\"getAgentCompany\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"}],\"name\":\"getCompanyAgents\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agentAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CompanyFee.sol\":\"CompanyFee\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/CompanyFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n//Interface name is not important, however functions in it are important\\r\\ninterface SellaTokenInterface {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external returns (uint256);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract CompanyFee is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address private _owner;\\r\\n    uint256 private _ownerFee;\\r\\n    address private _tokenAddres;\\r\\n\\r\\n    SellaTokenInterface SellaTokenContract = SellaTokenInterface(_tokenAddres);\\r\\n\\r\\n    struct Company {\\r\\n        string name;\\r\\n        uint256 fee;\\r\\n        bool exists;\\r\\n    }\\r\\n    mapping(address => Company) companies;\\r\\n\\r\\n    struct Agent {\\r\\n        string name;\\r\\n        uint256 fee;\\r\\n        bool exists;\\r\\n    }\\r\\n    mapping(address => Agent) agents;\\r\\n\\r\\n    //dato l'addess di un agente ricavo la compagnia di appartenenza\\r\\n    mapping(address => address) agentCompany;\\r\\n    //dato l'indirizzo di una compagnia, tutti i suoi agenti\\r\\n    mapping(address => address[]) companyAgents;\\r\\n\\r\\n    constructor(address tokenAddress, uint256 ownerFee_) {\\r\\n        _owner = msg.sender;\\r\\n        _ownerFee = ownerFee_;\\r\\n        _tokenAddres = tokenAddress;\\r\\n    }\\r\\n\\r\\n    function addCompany(\\r\\n        address companyAddress,\\r\\n        string memory companyName,\\r\\n        uint256 companyFee\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n            companyAddress != address(0),\\r\\n            \\\"Company address cannot be the zero address\\\"\\r\\n        );\\r\\n\\r\\n        companies[companyAddress] = Company(companyName, companyFee, true);\\r\\n    }\\r\\n\\r\\n    modifier onlyCompany() {\\r\\n        _checkCompany();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _checkCompany() internal view virtual {\\r\\n        require(companies[msg.sender].exists, \\\"Company not exist\\\");\\r\\n    }\\r\\n\\r\\n    function addAgent(\\r\\n        address agentAddress,\\r\\n        string memory agentName,\\r\\n        uint256 agentFee\\r\\n    ) public onlyCompany {\\r\\n        require(\\r\\n            agentAddress != address(0),\\r\\n            \\\"Agent address cannot be the zero address\\\"\\r\\n        );\\r\\n\\r\\n        agents[agentAddress] = Agent(agentName, agentFee, true);\\r\\n        agentCompany[agentAddress] = msg.sender;\\r\\n        companyAgents[msg.sender].push(agentAddress);\\r\\n    }\\r\\n\\r\\n    function splitPayment(address agentAddress, uint256 amount)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 agentFee = agents[agentAddress].fee;\\r\\n        address companyAddress = agentCompany[agentAddress];\\r\\n        uint256 companyFee = companies[companyAddress].fee;\\r\\n\\r\\n        uint256 payAgent = SafeMath.div(SafeMath.mul(amount, agentFee), 100);\\r\\n        SellaTokenContract.transferFrom(msg.sender, agentAddress, payAgent);\\r\\n\\r\\n        uint256 payOwner = SafeMath.div(SafeMath.mul(amount, _ownerFee), 100);\\r\\n        SellaTokenContract.transferFrom(msg.sender, _owner, payOwner);\\r\\n\\r\\n        uint256 payCompany = SafeMath.div(\\r\\n            SafeMath.mul(amount, companyFee),\\r\\n            100\\r\\n        );\\r\\n        SellaTokenContract.transferFrom(msg.sender, companyAddress, payCompany);\\r\\n\\r\\n        uint256 totFee = SafeMath.add(payAgent, payCompany);\\r\\n        totFee = SafeMath.add(totFee, payOwner);\\r\\n\\r\\n        amount = SafeMath.sub(amount, totFee);\\r\\n\\r\\n        SellaTokenContract.transferFrom(msg.sender, companyAddress, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getContractAddress() public view returns (address) {\\r\\n        return address(this);\\r\\n    }\\r\\n\\r\\n    function ownerFee() public view returns (uint256) {\\r\\n        return _ownerFee;\\r\\n    }\\r\\n\\r\\n    function getTokenAddress() public view returns (address) {\\r\\n        return _tokenAddres;\\r\\n    }\\r\\n\\r\\n    function company(address companyAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (Company memory)\\r\\n    {\\r\\n        return companies[companyAddress];\\r\\n    }\\r\\n\\r\\n    function agent(address agentAddress) public view returns (Agent memory) {\\r\\n        return agents[agentAddress];\\r\\n    }\\r\\n\\r\\n    function getCompanyAgents(address companyAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        return companyAgents[companyAddress];\\r\\n    }\\r\\n\\r\\n    function getAgentCompany(address agentAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return agentCompany[agentAddress];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2912373ec18431edf0ff13368c83f07e5d9bf8d815d351bbe1d31749b6a1d9cf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200007457600080fd5b50604051620021643803806200216483398181016040528101906200009a9190620002bc565b620000ba620000ae6200014b60201b60201c565b6200015360201b60201c565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060028190555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000303565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000249826200021c565b9050919050565b6200025b816200023c565b81146200026757600080fd5b50565b6000815190506200027b8162000250565b92915050565b6000819050919050565b620002968162000281565b8114620002a257600080fd5b50565b600081519050620002b6816200028b565b92915050565b60008060408385031215620002d657620002d562000217565b5b6000620002e6858286016200026a565b9250506020620002f985828601620002a5565b9150509250929050565b611e5180620003136000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80639efedba31161008c578063bbb9b58f11610066578063bbb9b58f14610214578063c44f45fe14610230578063d5b2a01a14610260578063f2fde38b1461027e576100cf565b80639efedba314610198578063b27ab5ce146101b4578063b80f5688146101e4576100cf565b806310fe9ae8146100d457806332a2c5d0146100f25780633c44156714610110578063715018a6146101405780638da5cb5b1461014a57806392e423b514610168575b600080fd5b6100dc61029a565b6040516100e9919061111e565b60405180910390f35b6100fa6102c4565b604051610107919061111e565b60405180910390f35b61012a600480360381019061012591906111af565b6102cc565b604051610137919061120a565b60405180910390f35b6101486106ee565b005b610152610702565b60405161015f919061111e565b60405180910390f35b610182600480360381019061017d9190611225565b61072b565b60405161018f9190611359565b60405180910390f35b6101b260048036038101906101ad91906114b0565b61083b565b005b6101ce60048036038101906101c99190611225565b610a75565b6040516101db91906115dd565b60405180910390f35b6101fe60048036038101906101f99190611225565b610b42565b60405161020b919061111e565b60405180910390f35b61022e600480360381019061022991906114b0565b610bab565b005b61024a60048036038101906102459190611225565b610cc7565b604051610257919061164f565b60405180910390f35b610268610dd7565b6040516102759190611680565b60405180910390f35b61029860048036038101906102939190611225565b610de1565b005b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600030905090565b600080600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905060006103d56103ce8786610e64565b6064610e7a565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3389846040518463ffffffff1660e01b81526004016104369392919061169b565b6020604051808303816000875af1158015610455573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047991906116fe565b50600061049261048b88600254610e64565b6064610e7a565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b81526004016105159392919061169b565b6020604051808303816000875af1158015610534573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055891906116fe565b50600061056f6105688986610e64565b6064610e7a565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3387846040518463ffffffff1660e01b81526004016105d09392919061169b565b6020604051808303816000875af11580156105ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061391906116fe565b5060006106208483610e90565b905061062c8184610e90565b90506106388982610ea6565b9850600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33888c6040518463ffffffff1660e01b81526004016106999392919061169b565b6020604051808303816000875af11580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc91906116fe565b50600197505050505050505092915050565b6106f6610ebc565b6107006000610f3a565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610733611097565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201805461078d9061175a565b80601f01602080910402602001604051908101604052809291908181526020018280546107b99061175a565b80156108065780601f106107db57610100808354040283529160200191610806565b820191906000526020600020905b8154815290600101906020018083116107e957829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900460ff1615151515815250509050919050565b610843610ffe565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a99061180e565b60405180910390fd5b604051806060016040528083815260200182815260200160011515815250600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908161092491906119da565b506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555090505033600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6060600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610b3657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610aec575b50505050509050919050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610bb3610ebc565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1990611b1e565b60405180910390fd5b604051806060016040528083815260200182815260200160011515815250600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019081610c9491906119da565b506020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550905050505050565b610ccf6110ba565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082018054610d299061175a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d559061175a565b8015610da25780601f10610d7757610100808354040283529160200191610da2565b820191906000526020600020905b815481529060010190602001808311610d8557829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900460ff1615151515815250509050919050565b6000600254905090565b610de9610ebc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4f90611bb0565b60405180910390fd5b610e6181610f3a565b50565b60008183610e729190611bff565b905092915050565b60008183610e889190611c88565b905092915050565b60008183610e9e9190611cb9565b905092915050565b60008183610eb49190611d0f565b905092915050565b610ec461108f565b73ffffffffffffffffffffffffffffffffffffffff16610ee2610702565b73ffffffffffffffffffffffffffffffffffffffff1614610f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2f90611d8f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1661108d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108490611dfb565b60405180910390fd5b565b600033905090565b604051806060016040528060608152602001600081526020016000151581525090565b604051806060016040528060608152602001600081526020016000151581525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611108826110dd565b9050919050565b611118816110fd565b82525050565b6000602082019050611133600083018461110f565b92915050565b6000604051905090565b600080fd5b600080fd5b611156816110fd565b811461116157600080fd5b50565b6000813590506111738161114d565b92915050565b6000819050919050565b61118c81611179565b811461119757600080fd5b50565b6000813590506111a981611183565b92915050565b600080604083850312156111c6576111c5611143565b5b60006111d485828601611164565b92505060206111e58582860161119a565b9150509250929050565b60008115159050919050565b611204816111ef565b82525050565b600060208201905061121f60008301846111fb565b92915050565b60006020828403121561123b5761123a611143565b5b600061124984828501611164565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561128c578082015181840152602081019050611271565b8381111561129b576000848401525b50505050565b6000601f19601f8301169050919050565b60006112bd82611252565b6112c7818561125d565b93506112d781856020860161126e565b6112e0816112a1565b840191505092915050565b6112f481611179565b82525050565b611303816111ef565b82525050565b6000606083016000830151848203600086015261132682826112b2565b915050602083015161133b60208601826112eb565b50604083015161134e60408601826112fa565b508091505092915050565b600060208201905081810360008301526113738184611309565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113bd826112a1565b810181811067ffffffffffffffff821117156113dc576113db611385565b5b80604052505050565b60006113ef611139565b90506113fb82826113b4565b919050565b600067ffffffffffffffff82111561141b5761141a611385565b5b611424826112a1565b9050602081019050919050565b82818337600083830152505050565b600061145361144e84611400565b6113e5565b90508281526020810184848401111561146f5761146e611380565b5b61147a848285611431565b509392505050565b600082601f8301126114975761149661137b565b5b81356114a7848260208601611440565b91505092915050565b6000806000606084860312156114c9576114c8611143565b5b60006114d786828701611164565b935050602084013567ffffffffffffffff8111156114f8576114f7611148565b5b61150486828701611482565b92505060406115158682870161119a565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611554816110fd565b82525050565b6000611566838361154b565b60208301905092915050565b6000602082019050919050565b600061158a8261151f565b611594818561152a565b935061159f8361153b565b8060005b838110156115d05781516115b7888261155a565b97506115c283611572565b9250506001810190506115a3565b5085935050505092915050565b600060208201905081810360008301526115f7818461157f565b905092915050565b6000606083016000830151848203600086015261161c82826112b2565b915050602083015161163160208601826112eb565b50604083015161164460408601826112fa565b508091505092915050565b6000602082019050818103600083015261166981846115ff565b905092915050565b61167a81611179565b82525050565b60006020820190506116956000830184611671565b92915050565b60006060820190506116b0600083018661110f565b6116bd602083018561110f565b6116ca6040830184611671565b949350505050565b6116db816111ef565b81146116e657600080fd5b50565b6000815190506116f8816116d2565b92915050565b60006020828403121561171457611713611143565b5b6000611722848285016116e9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061177257607f821691505b6020821081036117855761178461172b565b5b50919050565b600082825260208201905092915050565b7f4167656e7420616464726573732063616e6e6f7420626520746865207a65726f60008201527f2061646472657373000000000000000000000000000000000000000000000000602082015250565b60006117f860288361178b565b91506118038261179c565b604082019050919050565b60006020820190508181036000830152611827816117eb565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026118907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611853565b61189a8683611853565b95508019841693508086168417925050509392505050565b6000819050919050565b60006118d76118d26118cd84611179565b6118b2565b611179565b9050919050565b6000819050919050565b6118f1836118bc565b6119056118fd826118de565b848454611860565b825550505050565b600090565b61191a61190d565b6119258184846118e8565b505050565b5b818110156119495761193e600082611912565b60018101905061192b565b5050565b601f82111561198e5761195f8161182e565b61196884611843565b81016020851015611977578190505b61198b61198385611843565b83018261192a565b50505b505050565b600082821c905092915050565b60006119b160001984600802611993565b1980831691505092915050565b60006119ca83836119a0565b9150826002028217905092915050565b6119e382611252565b67ffffffffffffffff8111156119fc576119fb611385565b5b611a06825461175a565b611a1182828561194d565b600060209050601f831160018114611a445760008415611a32578287015190505b611a3c85826119be565b865550611aa4565b601f198416611a528661182e565b60005b82811015611a7a57848901518255600182019150602085019450602081019050611a55565b86831015611a975784890151611a93601f8916826119a0565b8355505b6001600288020188555050505b505050505050565b7f436f6d70616e7920616464726573732063616e6e6f7420626520746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000611b08602a8361178b565b9150611b1382611aac565b604082019050919050565b60006020820190508181036000830152611b3781611afb565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611b9a60268361178b565b9150611ba582611b3e565b604082019050919050565b60006020820190508181036000830152611bc981611b8d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c0a82611179565b9150611c1583611179565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611c4e57611c4d611bd0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611c9382611179565b9150611c9e83611179565b925082611cae57611cad611c59565b5b828204905092915050565b6000611cc482611179565b9150611ccf83611179565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611d0457611d03611bd0565b5b828201905092915050565b6000611d1a82611179565b9150611d2583611179565b925082821015611d3857611d37611bd0565b5b828203905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611d7960208361178b565b9150611d8482611d43565b602082019050919050565b60006020820190508181036000830152611da881611d6c565b9050919050565b7f436f6d70616e79206e6f74206578697374000000000000000000000000000000600082015250565b6000611de560118361178b565b9150611df082611daf565b602082019050919050565b60006020820190508181036000830152611e1481611dd8565b905091905056fea2646970667358221220fbabddf09dbb36944d54ed54d87bae19899f654f13822402a2d456dbef6c0af964736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80639efedba31161008c578063bbb9b58f11610066578063bbb9b58f14610214578063c44f45fe14610230578063d5b2a01a14610260578063f2fde38b1461027e576100cf565b80639efedba314610198578063b27ab5ce146101b4578063b80f5688146101e4576100cf565b806310fe9ae8146100d457806332a2c5d0146100f25780633c44156714610110578063715018a6146101405780638da5cb5b1461014a57806392e423b514610168575b600080fd5b6100dc61029a565b6040516100e9919061111e565b60405180910390f35b6100fa6102c4565b604051610107919061111e565b60405180910390f35b61012a600480360381019061012591906111af565b6102cc565b604051610137919061120a565b60405180910390f35b6101486106ee565b005b610152610702565b60405161015f919061111e565b60405180910390f35b610182600480360381019061017d9190611225565b61072b565b60405161018f9190611359565b60405180910390f35b6101b260048036038101906101ad91906114b0565b61083b565b005b6101ce60048036038101906101c99190611225565b610a75565b6040516101db91906115dd565b60405180910390f35b6101fe60048036038101906101f99190611225565b610b42565b60405161020b919061111e565b60405180910390f35b61022e600480360381019061022991906114b0565b610bab565b005b61024a60048036038101906102459190611225565b610cc7565b604051610257919061164f565b60405180910390f35b610268610dd7565b6040516102759190611680565b60405180910390f35b61029860048036038101906102939190611225565b610de1565b005b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600030905090565b600080600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905060006103d56103ce8786610e64565b6064610e7a565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3389846040518463ffffffff1660e01b81526004016104369392919061169b565b6020604051808303816000875af1158015610455573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047991906116fe565b50600061049261048b88600254610e64565b6064610e7a565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b81526004016105159392919061169b565b6020604051808303816000875af1158015610534573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055891906116fe565b50600061056f6105688986610e64565b6064610e7a565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3387846040518463ffffffff1660e01b81526004016105d09392919061169b565b6020604051808303816000875af11580156105ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061391906116fe565b5060006106208483610e90565b905061062c8184610e90565b90506106388982610ea6565b9850600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33888c6040518463ffffffff1660e01b81526004016106999392919061169b565b6020604051808303816000875af11580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc91906116fe565b50600197505050505050505092915050565b6106f6610ebc565b6107006000610f3a565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610733611097565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201805461078d9061175a565b80601f01602080910402602001604051908101604052809291908181526020018280546107b99061175a565b80156108065780601f106107db57610100808354040283529160200191610806565b820191906000526020600020905b8154815290600101906020018083116107e957829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900460ff1615151515815250509050919050565b610843610ffe565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a99061180e565b60405180910390fd5b604051806060016040528083815260200182815260200160011515815250600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908161092491906119da565b506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555090505033600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6060600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610b3657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610aec575b50505050509050919050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610bb3610ebc565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1990611b1e565b60405180910390fd5b604051806060016040528083815260200182815260200160011515815250600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019081610c9491906119da565b506020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550905050505050565b610ccf6110ba565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082018054610d299061175a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d559061175a565b8015610da25780601f10610d7757610100808354040283529160200191610da2565b820191906000526020600020905b815481529060010190602001808311610d8557829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900460ff1615151515815250509050919050565b6000600254905090565b610de9610ebc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4f90611bb0565b60405180910390fd5b610e6181610f3a565b50565b60008183610e729190611bff565b905092915050565b60008183610e889190611c88565b905092915050565b60008183610e9e9190611cb9565b905092915050565b60008183610eb49190611d0f565b905092915050565b610ec461108f565b73ffffffffffffffffffffffffffffffffffffffff16610ee2610702565b73ffffffffffffffffffffffffffffffffffffffff1614610f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2f90611d8f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1661108d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108490611dfb565b60405180910390fd5b565b600033905090565b604051806060016040528060608152602001600081526020016000151581525090565b604051806060016040528060608152602001600081526020016000151581525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611108826110dd565b9050919050565b611118816110fd565b82525050565b6000602082019050611133600083018461110f565b92915050565b6000604051905090565b600080fd5b600080fd5b611156816110fd565b811461116157600080fd5b50565b6000813590506111738161114d565b92915050565b6000819050919050565b61118c81611179565b811461119757600080fd5b50565b6000813590506111a981611183565b92915050565b600080604083850312156111c6576111c5611143565b5b60006111d485828601611164565b92505060206111e58582860161119a565b9150509250929050565b60008115159050919050565b611204816111ef565b82525050565b600060208201905061121f60008301846111fb565b92915050565b60006020828403121561123b5761123a611143565b5b600061124984828501611164565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561128c578082015181840152602081019050611271565b8381111561129b576000848401525b50505050565b6000601f19601f8301169050919050565b60006112bd82611252565b6112c7818561125d565b93506112d781856020860161126e565b6112e0816112a1565b840191505092915050565b6112f481611179565b82525050565b611303816111ef565b82525050565b6000606083016000830151848203600086015261132682826112b2565b915050602083015161133b60208601826112eb565b50604083015161134e60408601826112fa565b508091505092915050565b600060208201905081810360008301526113738184611309565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113bd826112a1565b810181811067ffffffffffffffff821117156113dc576113db611385565b5b80604052505050565b60006113ef611139565b90506113fb82826113b4565b919050565b600067ffffffffffffffff82111561141b5761141a611385565b5b611424826112a1565b9050602081019050919050565b82818337600083830152505050565b600061145361144e84611400565b6113e5565b90508281526020810184848401111561146f5761146e611380565b5b61147a848285611431565b509392505050565b600082601f8301126114975761149661137b565b5b81356114a7848260208601611440565b91505092915050565b6000806000606084860312156114c9576114c8611143565b5b60006114d786828701611164565b935050602084013567ffffffffffffffff8111156114f8576114f7611148565b5b61150486828701611482565b92505060406115158682870161119a565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611554816110fd565b82525050565b6000611566838361154b565b60208301905092915050565b6000602082019050919050565b600061158a8261151f565b611594818561152a565b935061159f8361153b565b8060005b838110156115d05781516115b7888261155a565b97506115c283611572565b9250506001810190506115a3565b5085935050505092915050565b600060208201905081810360008301526115f7818461157f565b905092915050565b6000606083016000830151848203600086015261161c82826112b2565b915050602083015161163160208601826112eb565b50604083015161164460408601826112fa565b508091505092915050565b6000602082019050818103600083015261166981846115ff565b905092915050565b61167a81611179565b82525050565b60006020820190506116956000830184611671565b92915050565b60006060820190506116b0600083018661110f565b6116bd602083018561110f565b6116ca6040830184611671565b949350505050565b6116db816111ef565b81146116e657600080fd5b50565b6000815190506116f8816116d2565b92915050565b60006020828403121561171457611713611143565b5b6000611722848285016116e9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061177257607f821691505b6020821081036117855761178461172b565b5b50919050565b600082825260208201905092915050565b7f4167656e7420616464726573732063616e6e6f7420626520746865207a65726f60008201527f2061646472657373000000000000000000000000000000000000000000000000602082015250565b60006117f860288361178b565b91506118038261179c565b604082019050919050565b60006020820190508181036000830152611827816117eb565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026118907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611853565b61189a8683611853565b95508019841693508086168417925050509392505050565b6000819050919050565b60006118d76118d26118cd84611179565b6118b2565b611179565b9050919050565b6000819050919050565b6118f1836118bc565b6119056118fd826118de565b848454611860565b825550505050565b600090565b61191a61190d565b6119258184846118e8565b505050565b5b818110156119495761193e600082611912565b60018101905061192b565b5050565b601f82111561198e5761195f8161182e565b61196884611843565b81016020851015611977578190505b61198b61198385611843565b83018261192a565b50505b505050565b600082821c905092915050565b60006119b160001984600802611993565b1980831691505092915050565b60006119ca83836119a0565b9150826002028217905092915050565b6119e382611252565b67ffffffffffffffff8111156119fc576119fb611385565b5b611a06825461175a565b611a1182828561194d565b600060209050601f831160018114611a445760008415611a32578287015190505b611a3c85826119be565b865550611aa4565b601f198416611a528661182e565b60005b82811015611a7a57848901518255600182019150602085019450602081019050611a55565b86831015611a975784890151611a93601f8916826119a0565b8355505b6001600288020188555050505b505050505050565b7f436f6d70616e7920616464726573732063616e6e6f7420626520746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000611b08602a8361178b565b9150611b1382611aac565b604082019050919050565b60006020820190508181036000830152611b3781611afb565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611b9a60268361178b565b9150611ba582611b3e565b604082019050919050565b60006020820190508181036000830152611bc981611b8d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c0a82611179565b9150611c1583611179565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611c4e57611c4d611bd0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611c9382611179565b9150611c9e83611179565b925082611cae57611cad611c59565b5b828204905092915050565b6000611cc482611179565b9150611ccf83611179565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611d0457611d03611bd0565b5b828201905092915050565b6000611d1a82611179565b9150611d2583611179565b925082821015611d3857611d37611bd0565b5b828203905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611d7960208361178b565b9150611d8482611d43565b602082019050919050565b60006020820190508181036000830152611da881611d6c565b9050919050565b7f436f6d70616e79206e6f74206578697374000000000000000000000000000000600082015250565b6000611de560118361178b565b9150611df082611daf565b602082019050919050565b60006020820190508181036000830152611e1481611dd8565b905091905056fea2646970667358221220fbabddf09dbb36944d54ed54d87bae19899f654f13822402a2d456dbef6c0af964736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1278,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1280,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "_ownerFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1282,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "_tokenAddres",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1288,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "SellaTokenContract",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(SellaTokenInterface)1271"
      },
      {
        "astId": 1300,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "companies",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Company)1295_storage)"
      },
      {
        "astId": 1312,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "agents",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Agent)1307_storage)"
      },
      {
        "astId": 1316,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "agentCompany",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1321,
        "contract": "contracts/CompanyFee.sol:CompanyFee",
        "label": "companyAgents",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(SellaTokenInterface)1271": {
        "encoding": "inplace",
        "label": "contract SellaTokenInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Agent)1307_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CompanyFee.Agent)",
        "numberOfBytes": "32",
        "value": "t_struct(Agent)1307_storage"
      },
      "t_mapping(t_address,t_struct(Company)1295_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CompanyFee.Company)",
        "numberOfBytes": "32",
        "value": "t_struct(Company)1295_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Agent)1307_storage": {
        "encoding": "inplace",
        "label": "struct CompanyFee.Agent",
        "members": [
          {
            "astId": 1302,
            "contract": "contracts/CompanyFee.sol:CompanyFee",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1304,
            "contract": "contracts/CompanyFee.sol:CompanyFee",
            "label": "fee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1306,
            "contract": "contracts/CompanyFee.sol:CompanyFee",
            "label": "exists",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Company)1295_storage": {
        "encoding": "inplace",
        "label": "struct CompanyFee.Company",
        "members": [
          {
            "astId": 1290,
            "contract": "contracts/CompanyFee.sol:CompanyFee",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1292,
            "contract": "contracts/CompanyFee.sol:CompanyFee",
            "label": "fee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1294,
            "contract": "contracts/CompanyFee.sol:CompanyFee",
            "label": "exists",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}